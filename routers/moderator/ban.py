import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, MessageReactionUpdated, CallbackQuery
from aiogram.enums import ChatType
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from middlewares.admin import CheckModerAccessMiddleware
from config import settings
from sqlalchemy.exc import IntegrityError

from .keyboards import punishment_list

from database import db_session
from models import ModerModel, Level

router = Router()
router.message.outer_middleware(CheckModerAccessMiddleware(Level.middle))

class BanStage(StatesGroup):
    author_id = State()
    punish_select = State()
    term = State()
    reason = State()

@router.message_reaction(F.chat.id == settings.TG_CHAT_ID, F.new_reaction.contains("üñï"))
async def handle_reaction(event: MessageReactionUpdated, state: FSMContext):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è. –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–Ω, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è ID –∞–≤—Ç–æ—Ä–∞ –∏ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ–∑–∂–µ"""
    fwd_msg = await event.bot.forward_message(event.user.id, settings.TG_CHAT_ID, event.message_id)
    author = fwd_msg.forward_from.full_name if fwd_msg.forward_from else "–°–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    if author:
        await state.update_data(ban_user=fwd_msg.forward_from.id, message_id=event.message_id)
        await event.bot.send_message(event.user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{author}</code>", parse_mode="HTML", reply_markup=punishment_list())
        await state.set_state(BanStage.punish_select)
        # await event.bot.delete_message(settings.TG_CHAT_ID, event.message_id)
    else:
        await state.set_state(BanStage.author_id)
        await event.bot.send_message(event.user.id, f"–ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID:")


@router.message(BanStage.author_id)
async def input_id(message: Message, state: FSMContext):
    if message.text == '/cancel':
        await state.clear()
        await message.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    author_id = message.text
    if not author_id.isdigit():
        await message.reply("ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è–∏—Ç—å –∏–∑ —Ü–∏—Ñ—Ä")
        return
    member = await message.bot.get_chat_member(settings.TG_CHAT_ID, int(author_id))
    if not member:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.")
        return
    
    await state.update_data(ban_id=member.user.id)
    await state.set_state(BanStage.punish_select)
    await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{member.user.full_name}</code>", parse_mode="HTML", reply_markup=punishment_list())

@router.callback_query(BanStage.punish_select)
async def apply_punish(callback: CallbackQuery, state: FSMContext):
    if callback.data == "kick":
        ...
    elif callback.data == "ban":
        ...
    elif callback.data == "mute":
        ...
    elif callback.data == "warn":
        ...
    else:
        logging.warn(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è. Data: {callback.data}; User: {callback.from_user.id}")        

